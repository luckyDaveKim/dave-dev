{"version":3,"sources":["webpack:///./src/components/Footer.tsx","webpack:///./src/templates/categories.tsx"],"names":["Footer","css","outer","SiteFooter","inner","SiteFooterContent","className","to","config","title","Date","getFullYear","footer","SiteFooterNav","github","href","target","rel","facebook","instagram","twitter","setLightness","colors","darkgrey","Categories","pageContext","data","location","category","edges","totalCount","allMarkdownRemark","CategoryData","allCategoryYaml","find","n","node","id","toLowerCase","name","content","description","property","siteUrl","pathname","split","SiteHeader","SiteArchiveHeader","SiteNavMain","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","fields","slug","post","pageQuery"],"mappings":"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","file":"component---src-templates-categories-tsx-a0c543c35f27c944e9d2.js","sourcesContent":["import { Link } from 'gatsby';\nimport { setLightness } from 'polished';\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport { outer, inner } from '../styles/shared';\nimport config from '../website-config';\n\nexport const Footer: React.FC = () => {\n  return (\n    <footer css={[outer, SiteFooter]}>\n      <div css={[inner, SiteFooterContent]}>\n        <section className=\"copyright\">\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}\n          {config.footer && ` | ${config.title} ${config.footer}`}\n        </section>\n        <SiteFooterNav>\n          <Link to=\"/\">Latest Posts</Link>\n          {config.github && (\n            <a href={config.github} target=\"_blank\" rel=\"noopener noreferrer\">\n              GitHub\n            </a>\n          )}\n          {config.facebook && (\n            <a href={config.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\n              Facebook\n            </a>\n          )}\n          {config.instagram && (\n            <a href={config.instagram} target=\"_blank\" rel=\"noopener noreferrer\">\n              Instagram\n            </a>\n          )}\n          {config.twitter && (\n            <a href={config.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\n              Twitter\n            </a>\n          )}\n\n          <a href=\"/rss.xml\">RSS</a>\n        </SiteFooterNav>\n      </div>\n    </footer>\n  );\n};\n\nconst SiteFooter = css`\n  position: relative;\n  padding-top: 20px;\n  padding-bottom: 60px;\n  color: #fff;\n  background: ${setLightness('0.0015', colors.darkgrey)};\n`;\n\nconst SiteFooterContent = css`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.7);\n  font-size: 1.3rem;\n  a {\n    color: rgba(255, 255, 255, 0.7);\n  }\n  a:hover {\n    color: rgba(255, 255, 255, 1);\n    text-decoration: none;\n  }\n  @media (max-width: 650px) {\n    flex-direction: column;\n  }\n`;\n\nconst SiteFooterNav = styled.nav`\n  display: flex;\n\n  a {\n    position: relative;\n    margin-left: 20px;\n  }\n\n  a:before {\n    content: '';\n    position: absolute;\n    top: 11px;\n    left: -11px;\n    display: block;\n    width: 2px;\n    height: 2px;\n    background: #fff;\n    border-radius: 100%;\n  }\n\n  a:first-of-type:before {\n    display: none;\n  }\n  @media (max-width: 650px) {\n    a:first-of-type {\n      margin-left: 0;\n    }\n  }\n`;\n\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport { FluidObject } from 'gatsby-image';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteNavMain,\n  SiteArchiveHeader,\n  ResponsiveHeaderBackground,\n  SiteHeaderBackground,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport { Helmet } from 'react-helmet';\nimport config from '../website-config';\n\ninterface CategoryTemplateProps {\n  location: Location;\n  pageContext: {\n    category: string;\n  };\n  data: {\n    allCategoryYaml: {\n      edges: Array<{\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: FluidObject;\n            };\n          };\n        };\n      }>;\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst Categories = ({ pageContext, data, location }: CategoryTemplateProps) => {\n  const category = pageContext.category ? pageContext.category : '';\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const CategoryData = data.allCategoryYaml.edges.find(\n    n => n.node.id.toLowerCase() === category.toLowerCase(),\n  );\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>\n          {category} - {config.title}\n        </title>\n        <meta name=\"description\" content={CategoryData?.node ? CategoryData.node.description : ''} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${category} - ${config.title}`} />\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${category} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n      </Helmet>\n      <Wrapper>\n        <header\n          className=\"site-archive-header\"\n          css={[SiteHeader, SiteArchiveHeader]}\n        >\n          <div css={[outer, SiteNavMain]}>\n            <div css={inner}>\n              <SiteNav isHome={false} />\n            </div>\n          </div>\n          <ResponsiveHeaderBackground\n            css={[outer, SiteHeaderBackground]}\n            backgroundImage={CategoryData?.node?.image?.childImageSharp?.fluid?.src}\n            className=\"site-header-background\"\n          >\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">{category}</SiteTitle>\n              <SiteDescription className=\"site-description\">\n                {CategoryData?.node.description ? (\n                  CategoryData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && '1 post'}\n                    {totalCount === 0 && 'No posts'}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </ResponsiveHeaderBackground>\n        </header>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={inner}>\n            <div css={PostFeed}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Categories;\n\nexport const pageQuery = graphql`\n  query($category: String) {\n    allCategoryYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { category: { eq: $category } }, frontmatter: { draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            excerpt\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}
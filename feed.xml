<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-09-26T18:18:37+00:00</updated><id>/</id><title type="html">DevDave</title><subtitle>프로그래밍으로 예술을 꿈꾸다</subtitle><entry><title type="html">Kotlin과 Spring Boot로 REST API 서비스 구축</title><link href="/kotlin/create-kotlin-spring-boot" rel="alternate" type="text/html" title="Kotlin과 Spring Boot로 REST API 서비스 구축" /><published>2019-09-25T10:05:34+00:00</published><updated>2019-09-25T10:05:34+00:00</updated><id>/kotlin/create-kotlin-spring-boot</id><content type="html" xml:base="/kotlin/create-kotlin-spring-boot">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;이 포스팅에서는 &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt; 언어와 &lt;a href=&quot;https://spring.io/projects/spring-boot&quot;&gt;Spring Boot&lt;/a&gt; 프레임워크로 REST Api 서비스를 구축하는 과정을 담고자 합니다.&lt;/p&gt;

&lt;p&gt;만약 Kotlin에 대해 자세히 알고 싶으시면 &lt;a href=&quot;https://kotlinlang.org/docs/reference/&quot;&gt;참고 문서&lt;/a&gt;를 읽어보시고, &lt;a href=&quot;https://play.kotlinlang.org/koans/overview&quot;&gt;웹 튜토리얼&lt;/a&gt;을 통해 쉽게 배우실 수 있습니다.&lt;/p&gt;

&lt;h1 id=&quot;목표&quot;&gt;목표&lt;/h1&gt;
&lt;p&gt;새로운 기술을 재미있게 공부하기 위해서는 &lt;strong&gt;토이 프로젝트&lt;/strong&gt;가 제격이라고 봅니다.&lt;br /&gt;
이번 토이 프로젝트는 &lt;strong&gt;&lt;a href=&quot;https://github.com/luckyDaveKim/vue.kt&quot;&gt;Vue.kt&lt;/a&gt;&lt;/strong&gt;로써 Front-end는 &lt;strong&gt;Vue.js&lt;/strong&gt;를 사용하고, Back-end는 &lt;strong&gt;Kotlin&lt;/strong&gt;을 사용하여 처음 시작하는 사람도 쉽게 접근할 수 있는 &lt;strong&gt;Web Service Starter&lt;/strong&gt; Todo List를 만들어 보려고 합니다.&lt;/p&gt;

&lt;p&gt;그 중 이번 포스팅에서는 Kotlin과 Spring Boot로 Back-end REST Api 서버를 구축하는 기본 과정을 그려보려 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이번 포스팅에서 진행하는 모든 과정은 &lt;strong&gt;&lt;a href=&quot;https://github.com/luckyDaveKim/vue.kt&quot;&gt;Vue.kt&lt;/a&gt;&lt;/strong&gt; github에 담아두었습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;구성&quot;&gt;구성&lt;/h1&gt;
&lt;p&gt;다음과 같은 기술들을 사용합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kotlin&lt;/li&gt;
  &lt;li&gt;Spring boot&lt;/li&gt;
  &lt;li&gt;Gradle&lt;/li&gt;
  &lt;li&gt;JUnit5&lt;/li&gt;
  &lt;li&gt;H2&lt;/li&gt;
  &lt;li&gt;JPA&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;프로젝트-생성&quot;&gt;프로젝트 생성&lt;/h1&gt;
&lt;p&gt;Spring 사이트에서 Spring Frameworks를 구성을 도와주는 웹 페이지 &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt;를 통해서 기본적인 Spring Boot 프로젝트를 생성하도록 하겠습니다.&lt;br /&gt;
웹 페이지에 접속 후, Build Tool로 &lt;strong&gt;Gradle&lt;/strong&gt;을 선택하고, 개발 언어로 &lt;strong&gt;Kotlin&lt;/strong&gt;을 선택, 프로젝트 group명과 artifact를 입력하면 손쉽게 Spring Boot 프로젝트를 생성 할 수 있습니다.&lt;br /&gt;
Dependencies 같은 경우 추후에 필요 시 추가할 수 있기 때문에 지금은 아무것도 입력하지 않았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/kotlin/2019/2019-09-25/create-kotlin-spring-boot/spring-initializr.png&quot; alt=&quot;spring-initializr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 생성된 프로젝트 압축 파일을 원하는 경로에 풀고 각자의 개발 IDE로 실행하면 기본적인 준비는 끝났습니다. 저는 &lt;strong&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;&lt;/strong&gt;를 통해 개발하도록 하겠습니다.&lt;br /&gt;
IntelliJ로 프로젝트를 열어보면, Spring Boot는 다음과 같은 구조를 갖고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/kotlin/2019/2019-09-25/create-kotlin-spring-boot/spring-boot-architecture.png&quot; alt=&quot;spring-boot-architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;간단하게 살펴보시면, 최상위에 src로 source root가 위치하고 있으며, 그 내부에 &lt;em&gt;main&lt;/em&gt;과 &lt;em&gt;test&lt;/em&gt;가 있습니다.&lt;br /&gt;
&lt;em&gt;main&lt;/em&gt;에는 핵심 source가 들어갈 예정이며, Spring Initializr에서 입력한 프로젝트 group명과 artifact로 패키지가 생성되어 있습니다.&lt;br /&gt;
기본 패키지 아래를 보시면, &lt;em&gt;artifact명 + Application.kt&lt;/em&gt;로 메인 클래스가 위치하고 있습니다.&lt;br /&gt;
또한, main 아래에 &lt;em&gt;resources&lt;/em&gt;는 정적인 파일들이 관리될 예정입니다.&lt;/p&gt;

&lt;p&gt;여기까지 간단하게 Spring Boot의 기본 구조를 살펴보았습니다.&lt;br /&gt;
이제 본격적으로 Spring Boot를 활용해 보도록 하겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;hello-todo-출력하기&quot;&gt;Hello Todo 출력하기&lt;/h1&gt;
&lt;p&gt;프로젝트도 생성 했겠다. 기본적인 “Hello Todo”를 프린트하지 않고 넘어갈 수 없겠죠?&lt;/p&gt;

&lt;h2 id=&quot;api-생성&quot;&gt;Api 생성&lt;/h2&gt;
&lt;p&gt;기본적인 Todo API를 만들어 보겠습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;com.backend.vuekt.todo.api&lt;/code&gt; 패키지에 &lt;code class=&quot;highlighter-rouge&quot;&gt;TodoApi.kt&lt;/code&gt; 클래스를 생성하였습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;package com.backend.vuekt.todo.api

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

@RestController &amp;lt;=== (1)
@RequestMapping(&quot;/api/v1&quot;) &amp;lt;=== (2)
class TodoApi {

    @GetMapping(&quot;/&quot;) &amp;lt;=== (3)
    fun readTodo(): String { &amp;lt;=== (4)
        return &quot;Hello Todo&quot;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;(1) : class 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt; Annotation을 선언하였습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;@RestController&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Controller&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt;를 한번에 선언해주는 Annotation으로 해당 class의 모든 하위 함수에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt;를 명시적으로 붙여주지 않아도 자동으로 설정해준다.&lt;/li&gt;
  &lt;li&gt;(2) : calss 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@RequestMapping&lt;/code&gt;를 선언하여 해당 class의 모든 하위 함수 Url Mapping값 앞에 &lt;em&gt;/api/v1&lt;/em&gt;을 적용하였습니다.&lt;/li&gt;
  &lt;li&gt;(3) : 함수 상단에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@GetMapping&lt;/code&gt;을 선언하여 &lt;em&gt;get&lt;/em&gt;으로 접근하는 request를 매핑하도록 하였습니다.&lt;/li&gt;
  &lt;li&gt;(4) : &lt;em&gt;readTodo&lt;/em&gt;라는 함수를 선언하고 requset요청 시 &lt;em&gt;Hello Todo&lt;/em&gt;를 반환하도록 하였습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로젝트를 빌드 및 실행 후, &lt;em&gt;localhost:8080/api/v1/&lt;/em&gt;로 get request를 날리면 &lt;em&gt;Hello Todo&lt;/em&gt;가 출력되는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;unit-test&quot;&gt;Unit Test&lt;/h2&gt;
&lt;p&gt;생성한 Api를 테스트하는 간단한 unit test를 작성해 보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;junit5-dependencies-설정&quot;&gt;JUnit5 Dependencies 설정&lt;/h3&gt;
&lt;p&gt;테스트를 작성하기에 앞서 의존성 모듈을 설정하도록 하겠습니다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle.kts&lt;/code&gt; gradle 설정 파일에 다음과 같이 dependencies를 변경해 줍니다.&lt;/p&gt;

&lt;h4 id=&quot;as-is&quot;&gt;As-Is&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;dependencies {
	implementation(&quot;org.springframework.boot:spring-boot-starter-web&quot;)
	implementation(&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;)
	implementation(&quot;org.jetbrains.kotlin:kotlin-reflect&quot;)
	implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;)
	testImplementation(&quot;org.springframework.boot:spring-boot-starter-test&quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;to-be&quot;&gt;To-Be&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;dependencies {
	implementation(&quot;org.springframework.boot:spring-boot-starter-web&quot;)
	implementation(&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;)
	implementation(&quot;org.jetbrains.kotlin:kotlin-reflect&quot;)
	implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;)
	testCompile(&quot;org.springframework.boot:spring-boot-starter-test&quot;) {
		exclude(module = &quot;junit&quot;) &amp;lt;=== (1)
	}
	testImplementation(&quot;org.junit.jupiter:junit-jupiter-api&quot;) &amp;lt;=== (2)
	testRuntimeOnly(&quot;org.junit.jupiter:junit-jupiter-engine&quot;) &amp;lt;=== (3)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;(1) : &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.boot:spring-boot-starter-test&lt;/code&gt; 모듈은 &lt;code class=&quot;highlighter-rouge&quot;&gt;JUnit4&lt;/code&gt;에 대한 의존성을 가지고 있습니다.&lt;br /&gt;
그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;JUnit5&lt;/code&gt;를 사용하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;org.springframework.boot:spring-boot-starter-test&lt;/code&gt;에 추가되어 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JUnit4&lt;/code&gt;를 제외해야 합니다.&lt;/li&gt;
  &lt;li&gt;(2) : &lt;code class=&quot;highlighter-rouge&quot;&gt;org.junit.jupiter:junit-jupiter-api&lt;/code&gt; 모듈은 테스트 코드 작성에 사용되는 모듈입니다.&lt;/li&gt;
  &lt;li&gt;(3) : &lt;code class=&quot;highlighter-rouge&quot;&gt;org.junit.jupiter:junit-jupiter-engine&lt;/code&gt; 모듈은 테스트 실행에 사용되는 모듈입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 추가로 &lt;code class=&quot;highlighter-rouge&quot;&gt;useJUnitPlatform&lt;/code&gt;을 선언합니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;tasks.withType&amp;lt;Test&amp;gt; {
	useJUnitPlatform() &amp;lt;=== (1)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;(1) : &lt;code class=&quot;highlighter-rouge&quot;&gt;useJUnitPlatform()&lt;/code&gt;은 테스트 실행시 JUnit 플랫폼이라는 것을 명시합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unit-test-작성&quot;&gt;Unit Test 작성&lt;/h3&gt;
&lt;p&gt;의존성 모듈을 모두 설정하였으니 이제 본격적으로 unit test를 작성하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;com.backend.vuekt.todo.api.todoapi&lt;/code&gt; 패키지에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadTodoTests.kt&lt;/code&gt; 클래스를 생성하였습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;package com.backend.vuekt.todo.api.todoapi

import com.backend.vuekt.todo.api.TodoApi
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.content
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

@WebMvcTest(TodoApi::class) &amp;lt;=== (1)
class ReadTodoTests(@Autowired val mockMvc: MockMvc) { &amp;lt;=== (2)

    @Test
    fun `Assert get right contents`() {
        /* when */
        val actions = mockMvc.perform(get(&quot;/api/v1/&quot;)) &amp;lt;=== (3)

        /* then */
        actions.andExpect(status().isOk)
                .andExpect(content().string(&quot;Hello Todo&quot;)) &amp;lt;=== (4)
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;(1) : &lt;code class=&quot;highlighter-rouge&quot;&gt;@WebMvcTest&lt;/code&gt;은 MVC를 위한 단위 테스트 annotation으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;@SpringBootTest&lt;/code&gt;보다 가볍습니다.
그렇기 때문에 테스트할 특정 클래스를 명시 해야합니다.&lt;/li&gt;
  &lt;li&gt;(2) : 주입된 &lt;code class=&quot;highlighter-rouge&quot;&gt;MockMvc&lt;/code&gt;는 테스트시, 모든 의존성을 로드하는 것이 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;@WebMvcTest&lt;/code&gt;에 설정한 클래스와 관련된 Bean만 로드합니다.&lt;/li&gt;
  &lt;li&gt;(3) : &lt;em&gt;Given/When/Then&lt;/em&gt; 테스트 패턴(DBB:Behavior-Driven-Development)중 &lt;code class=&quot;highlighter-rouge&quot;&gt;When&lt;/code&gt;으로 테스트의 행위를 기술합니다.&lt;/li&gt;
  &lt;li&gt;(4) : &lt;code class=&quot;highlighter-rouge&quot;&gt;Then&lt;/code&gt;은 테스트의 결과를 검증합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;줄이며&quot;&gt;줄이며…&lt;/h1&gt;
&lt;p&gt;지금까지 Kotlin-Spring Boot 프로젝트 생성부터 간단한 REST Api 작성 및 테스트를 진행하였습니다.&lt;br /&gt;
다음에는 DB 연결을 진행하도록 하겠습니다.&lt;/p&gt;</content><author><name></name></author><category term="kotlin" /><category term="kotlin" /><category term="spring_boot" /><category term="rest_api" /><category term="junit5" /><summary type="html">개요 이 포스팅에서는 Kotlin 언어와 Spring Boot 프레임워크로 REST Api 서비스를 구축하는 과정을 담고자 합니다.</summary></entry><entry><title type="html">Vue.js 사용하기</title><link href="/vuejs/create-vuejs" rel="alternate" type="text/html" title="Vue.js 사용하기" /><published>2019-09-09T10:20:55+00:00</published><updated>2019-09-09T10:20:55+00:00</updated><id>/vuejs/create-vuejs</id><content type="html" xml:base="/vuejs/create-vuejs">&lt;h1 id=&quot;vue-cli란&quot;&gt;Vue CLI란?&lt;/h1&gt;
&lt;p&gt;Vue CLI는 커멘드라인 인터페이스 기반의 Vue 프로젝트 생성 도구이며, 사용자가 어플리케이션 개발에 집중할 수 있도록 프로젝트 구성을 도와준다.&lt;/p&gt;

&lt;p&gt;Vue CLI 3의 목표는 다음 두가지 &lt;a href=&quot;https://github.com/vuejs/vue-cli/issues/589&quot;&gt;문제점&lt;/a&gt;을 해결하는 것 이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;템플릿에 빌드 설정이 포함되어 다음의 문제가 존재한다.
    &lt;ul&gt;
      &lt;li&gt;일단 프로젝트가 생성되면 템플릿의 의존성 업그레이드가 어렵다.&lt;/li&gt;
      &lt;li&gt;github에서 직접 가져오는 방식은 npm를 통한 버전관리에 취약하다.&lt;/li&gt;
      &lt;li&gt;빌드 설정이 복잡하여 진입 장벽이 높다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;선택 사항이 너무 많다.
    &lt;ul&gt;
      &lt;li&gt;초보자가 어떤 템플릿이 현재 프로젝트에 적합한 템플릿인지 선택하기 어려우며, &lt;strong&gt;webpack&lt;/strong&gt; 템플릿의 linter 또는 테스팅 도구는 진입 장벽이 높다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;일단-따라해보자&quot;&gt;일단 따라해보자!&lt;/h1&gt;
&lt;p&gt;Vue CLI를 통한 Vue 프로젝트를 생성해보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;선행 작업으로 &lt;strong&gt;node.js&lt;/strong&gt; 설치가 필요하다.&lt;br /&gt;
필자가 사용한 node 버전은 v10.16.3 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Vue CLI 설치
&lt;strong&gt;npm&lt;/strong&gt; 혹은 &lt;strong&gt;yarn&lt;/strong&gt;을 설치 후 다음 명령어를 통해 Vuee CLI를 설치한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; npm install -g @vue/cli
# 혹은
&amp;gt; yarn global add @vue/cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Vue 프로젝트 생성 (CLI 사용)
프로젝트 명을 명시해서 생성할 수 있고, 혹은 현재 경로에 바로 생성할 수 있다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vue create my-project
# 혹은
&amp;gt; vue create .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위 명령어 실행 시, 기본값으로 자동 프로젝트 생성 혹은 사용자 정의 프로젝트 생성이 가능하다.&lt;br /&gt;
기본값 생성으로는 &lt;strong&gt;babel&lt;/strong&gt;과 &lt;strong&gt;eslint&lt;/strong&gt;가 포함되어 있다.
&lt;img src=&quot;/assets/images/post/vuejs/2019/2019-09-09/create-vuejs/vue-create-default.png&quot; alt=&quot;vue create default&quot; /&gt;
사용자 정의 생성으로는 다음 항목들에 대해 선택이 가능하다.
&lt;img src=&quot;/assets/images/post/vuejs/2019/2019-09-09/create-vuejs/vue-create-manually.png&quot; alt=&quot;vue create manually&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디렉토리 구조
디렉토리 구조는 다음과 같이 구성되어 있다.
&lt;img src=&quot;/assets/images/post/vuejs/2019/2019-09-09/create-vuejs/vue-directory-structure.png&quot; alt=&quot;vue directory structure&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Vue 프로젝트 생서 (GUI 사용)
다음 명령어를 통해 GUI를 사용하여 프로젝트를 생성할 수 있다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; vue ui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;img src=&quot;/assets/images/post/vuejs/2019/2019-09-09/create-vuejs/vue-create-gui.png&quot; alt=&quot;vue create gui&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;끝으로&quot;&gt;끝으로…&lt;/h1&gt;
&lt;p&gt;여기까지 Vue CLI를 사용하여 기본 프로젝트를 생성하는 방법에 대해 알아보았다.&lt;br /&gt;
다음에는 생성한 프로젝트의 구조에 대해 좀더 자세히 알아보도록 하자.&lt;/p&gt;</content><author><name></name></author><category term="vuejs" /><category term="vuejs" /><category term="vue_cli_3" /><category term="frontend" /><summary type="html">Vue CLI란? Vue CLI는 커멘드라인 인터페이스 기반의 Vue 프로젝트 생성 도구이며, 사용자가 어플리케이션 개발에 집중할 수 있도록 프로젝트 구성을 도와준다.</summary></entry><entry><title type="html">ES6?! ES2015?! ECMAScript란 도대체 무엇인가?</title><link href="/javascript/what-is-the-ecmascript" rel="alternate" type="text/html" title="ES6?! ES2015?! ECMAScript란 도대체 무엇인가?" /><published>2018-02-07T11:30:04+00:00</published><updated>2018-02-07T11:30:04+00:00</updated><id>/javascript/what-is-the-ecmascript</id><content type="html" xml:base="/javascript/what-is-the-ecmascript">&lt;h1 id=&quot;es6은-뭐고-es2015는-뭐야&quot;&gt;ES6은 뭐고 ES2015는 뭐야?!&lt;/h1&gt;
&lt;p&gt;가끔씩 볼때마다 헷갈리는 ECMAScript 버전!! 도대체 어떻게 버전관리를 하는거야 ㅠㅠ.
다음부터 헷갈리지 않게 한번 정리해놔야겠다.&lt;/p&gt;

&lt;h1 id=&quot;자바스크립트javascript-잘-알고있니&quot;&gt;자바스크립트(JavaScript) 잘 알고있니?&lt;/h1&gt;
&lt;p&gt;ECMAScript를 알기전에 우선 친숙한 자바스크립트에 대해 알아보자.&lt;/p&gt;

&lt;p&gt;우리(내게)에게 친숙한 자바스크립트는 웹브라우저(클라이언트)에서 멀고먼 서버에 데이터를 보내기 전, 데이터 유효성 검사 등을 처리하는 스크립트 언어였다. 이 자바스크립트는 1995년 넷스케이프(Netscape)의 Brendan Eich에 의해 개발된 언어이고, Mocha -&amp;gt; LiveScript -&amp;gt; JavaScript의 네이밍 변천사를 갖고있는 아이이다. 그리고 사실 우리가 알던 자바스크립트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ECMAScript&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;BOM(Browser Object Model)&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM(Document Object Model)&lt;/code&gt;라는 1개의 코어와 2개의 모델로 이루어져있다는 것만 인지하고 있자.&lt;/p&gt;

&lt;h1 id=&quot;ecmascript란&quot;&gt;ECMAScript란?&lt;/h1&gt;
&lt;p&gt;그렇다면! 다시 본론으로 돌아가서 ECMAScript(이하 ES)란 무엇인가?&lt;/p&gt;

&lt;p&gt;ES는 자바스크립트를 이루는 코어(Core)스크립트 언어로써, 다양한 환경에서 운용될 수 있게 확장성을 갖고 있기때문에 사용처가 웹환경으로 국한되어있지는 않다. 즉 위에서 말한 우리가 아는 자바스크립트는 웹브라우저에서 돌아갈 수 있도록 &lt;code class=&quot;highlighter-rouge&quot;&gt;BOM&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;DOM&lt;/code&gt;을 함께 사용하는 확장성이 되겠다. 이러한 확장성들은 ES 버전에 따른 문법과 기능의 확장을 가능하게 한다.&lt;/p&gt;

&lt;h1 id=&quot;그렇다면-es의-버전관리는-어떻게-되는거야&quot;&gt;그렇다면 ES의 버전관리는 어떻게 되는거야?&lt;/h1&gt;

&lt;p&gt;ES는 다음과 같은 버전 히스토리를 갖고있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ES3&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ES5&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ES6&lt;/code&gt;(ES2015) -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ES7&lt;/code&gt;(ES2016)&lt;/p&gt;

&lt;p&gt;뭐야…! 헷갈리게 넘버링과 년도가 따로있네, 그렇다 ES5 != ES2015 였던 것이다. 그렇다면 각 버전에 대해 좀더 자세히 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;es3-1999&quot;&gt;ES3 (1999)&lt;/h2&gt;
&lt;p&gt;대중적으로 알고있는 그냥 자바스크립트라고 보면 된다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;함수 단위의 스코프&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;호이스팅&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;클로저&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;프로토타입&lt;/code&gt; 등… 우리가 익히 알고있는 자바스크립트의 기본적인 특징들을 갖고있다. 대부분의 브라우저에서 지원하며, IE8까지 크로스브라우징을 지원하는 환경이라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;ES3&lt;/code&gt;을 쓰고 있다고 보면 된다.&lt;/p&gt;

&lt;h2 id=&quot;es5-2009&quot;&gt;ES5 (2009)&lt;/h2&gt;
&lt;p&gt;ES4는 너무 시대의 흐름을 앞서갔는지 거절되고, 그 후에 점진적인 개선을 목표로 ES5가 나왔다고 한다. 아무리 그래도 10년만에 버전업이라니 너무한것 같지만 ㅁ낳은 편리한 기능이 추가되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열
배열과 관련하여 편리한 메소드들이 다수 생겼다. &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;some&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;every&lt;/code&gt;와 같은 순환 메소드들이 생겼다. 이 메소드들은 개발 시 불필요한 중복 코드를 줄여주어서 가독성은 높이고 버그율은 낮추는 효과가 있다.&lt;/li&gt;
  &lt;li&gt;객체
객체는 프로퍼티에 대한 설정을 할 수 있게 되었다. 객체를 생성, 수정, 복사하는 표준 메소드 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.Create()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.defineProperty()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.freeze()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.assign()&lt;/code&gt; 등 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;setter&lt;/code&gt; 등이 추가되었으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.keys()&lt;/code&gt; 메소드를 이용하면 for in 메소드도 대체할 수 있게 되었다.&lt;/li&gt;
  &lt;li&gt;strict 모드
문법을 좀 더 깐깐하게 체크하는 모드이다. 너무 자유분방하였던 기존 ES를 안전하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;개발자가 인지할 수 있는 범위 안에서&lt;/code&gt; 개발할 수 있도록 사용하기 위해 등장했다. &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;Strict mode - JavaScript | MDN&lt;/a&gt;에서 자세한 특징을 확인 할 수 있다.&lt;/li&gt;
  &lt;li&gt;bind() 메소드
this를 강제로 바인딩 시켜주는 메소드이다. 좀 더 명확하게 this 스코프를 지정 할 수 있게 되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;es6-es2015&quot;&gt;ES6 (ES2015)&lt;/h2&gt;
&lt;p&gt;ES6보다 ES2015라고 많이 불리우며, ES6 Harmony라고도 불리운다고 한다. ES2015에서 다음과 같은 문제점들이 해결되었다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;호이스팅이 사라진 것 같은 효과&lt;/li&gt;
  &lt;li&gt;함수 단위 스코프에서 블록 단위 스코프로 변경&lt;/li&gt;
  &lt;li&gt;this를 동적으로 바인딩하지 않는 화살표 함수&lt;/li&gt;
  &lt;li&gt;모듈화 지원&lt;/li&gt;
  &lt;li&gt;콜백 지옥에서 구원해줄 Promise&lt;/li&gt;
  &lt;li&gt;Default, Rest 파라미터&lt;/li&gt;
  &lt;li&gt;해체 할당, Spread 연산자&lt;/li&gt;
  &lt;li&gt;템플릿 리터럴&lt;/li&gt;
  &lt;li&gt;클래스
이 외에도 추가된점이 너무 많아서 이부분에서 사람들이 진입장벽을 느끼는 것 같다.
브라우저(특히 MS 계열)에서 지원해주지 않는 경우가 많아 &lt;code class=&quot;highlighter-rouge&quot;&gt;바벨(Babel)&lt;/code&gt;이라는 트랜스파일러를 써야하는데 이 바벨은 웹브라우저가 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; 위에서 돌아가고… Node.js를 설치하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;NPM&lt;/code&gt;을 알아야하고… 또 모듈화를 사용하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹팩(WebPack)&lt;/code&gt;같은 모듈 번들러를 알아야하고…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 다양한 장벽 때문에 사람들이 ES2015를 쉽게 접근하지 못하는 경향이 있는 것 같다.
하지만 우리는 언제나처럼 도전할 것이다!&lt;/p&gt;

&lt;h2 id=&quot;es7-es2016&quot;&gt;ES7 (ES2016)&lt;/h2&gt;
&lt;p&gt;이번에는 다행히? ES2015때처럼 큰 변화는 없었다. 비교하자면 ES2015의 1/10 정도도 안되는 분량? 휴.. 다행이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;제곱 연산자(**) 등장&lt;/li&gt;
  &lt;li&gt;Array.includes 배열에 해당 요소가 존재하는지 확인하는 메소드 등장&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;es8-es2017&quot;&gt;ES8 (ES2017)&lt;/h2&gt;
&lt;p&gt;ES2017에서는 Promise 급의 중대한 변화인 &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;등이 발표되었습니다!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;async&lt;/li&gt;
  &lt;li&gt;await&lt;/li&gt;
  &lt;li&gt;객체
객체의 좀더 심화된 메소드가 등장했습니다. Object.keys()에 대응되는 메소드인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.values()&lt;/code&gt;, Object.keys()와 Object.values()를 합쳐 놓은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.entries()&lt;/code&gt;, Object.getOwnPropertyDescriptor의 복수 형태인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.getOwnPropertDescriptors()&lt;/code&gt;로써 상속받지 않은 속성들의 설명만 보여줍니다.&lt;/li&gt;
  &lt;li&gt;문자열
단순 편의기능이 추가되었습니다. 문자열 앞부분에 공백을 넣어 자리수를 맞춰주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;String.padStart()&lt;/code&gt;, 문자열 뒷부분에 공백을 넣어 자리수를 맞춰주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;String.padEnd()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;매개변수 마지막에 콤마를 붙이는걸 허용&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;이제-좀-명쾌하네&quot;&gt;이제 좀 명쾌하네~!&lt;/h1&gt;
&lt;p&gt;ES3에서 ES5까지 10년, ES6까지 7년의 공백 때문에 많은 변화가 있었는데, 앞으로 매년 표준을 제정하며 그런 혼란을 줄일 예정인 것 같다. 또한 이후에 나올 ES를 통칭해서 ES.Next라고 부른다. 다음 ES9(ES2018)은 어떨까..?
이번에는 전반적인 ES에 대해 알아보느라 메소드 하나하나 자세히 알아보지는 못한것 같다. 다음 시간에는 각 메소드를 자세히 알아보도록 하자.&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="javascript" /><category term="js" /><category term="ecmascript" /><category term="es5" /><category term="es6" /><category term="es2015" /><category term="es2016" /><summary type="html">ES6은 뭐고 ES2015는 뭐야?! 가끔씩 볼때마다 헷갈리는 ECMAScript 버전!! 도대체 어떻게 버전관리를 하는거야 ㅠㅠ. 다음부터 헷갈리지 않게 한번 정리해놔야겠다.</summary></entry><entry><title type="html">윈도우에서 JDK 8 설치 및 환경설정</title><link href="/environment/install-jdk-with-setting-at-windows" rel="alternate" type="text/html" title="윈도우에서 JDK 8 설치 및 환경설정" /><published>2018-01-28T06:53:25+00:00</published><updated>2018-01-28T06:53:25+00:00</updated><id>/environment/install-jdk-with-setting-at-windows</id><content type="html" xml:base="/environment/install-jdk-with-setting-at-windows">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;이 포스팅에서는 JDK 8 설치 및 환경설정하는 방법에 대해 소개하고자 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jdk-java-development-kit.jpg&quot; alt=&quot;jdk-logo&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;jdk-다운로드&quot;&gt;JDK 다운로드&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;JDK 다운로드&lt;/a&gt;를 클릭하여 JDK를 다운로드 하거나, 혹은 다음 절차를 따라 다운로드 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.oracle.com&quot;&gt;Oracle 홈페이지&lt;/a&gt;에 접속한다.&lt;/li&gt;
  &lt;li&gt;상단 메뉴를 클릭 후 &lt;strong&gt;Java &amp;gt; Java SE&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/java-se-download-menu.png&quot; alt=&quot;Java SE 다운로드 메뉴&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;하단의 &lt;strong&gt;Get Started&lt;/strong&gt;에서 &lt;strong&gt;Download Java SE for Developers&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/java-se-get-started.png&quot; alt=&quot;Java SE 다운로드 메뉴&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;JDK 8버전을 받을 것이므로 해당 버튼을 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jdk-download.png&quot; alt=&quot;Java SE 다운로드 메뉴&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Accept License Agreement&lt;/strong&gt;를 클릭 후, 자신의 윈도우 비트에 맞는 JDK를 클릭하여 다운로드한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jdk-windows-download.png&quot; alt=&quot;Java SE 다운로드 메뉴&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jdk-설치&quot;&gt;JDK 설치&lt;/h1&gt;
&lt;p&gt;위에서 다운로드받은 JDK 파일을 다음 절차에 따라 설치한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Next&lt;/strong&gt; 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jdk-install-agreement.png&quot; alt=&quot;JDK 설치 동의&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;원하는 JDK 설치 경로를 지정한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jdk-install-path-setting.png&quot; alt=&quot;JDK 설치 경로 설정&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;JDK 설치완료!
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jdk-install.png&quot; alt=&quot;JDK 설치&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;원하는 JRE 설치 경로를 지정한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jre-install-path-setting.png&quot; alt=&quot;JRD 설치 경로 설정&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;JRD 설치완료!
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/jre-install.png&quot; alt=&quot;JDK 설치&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Java SE 설치완료!
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/java-se-installed.png&quot; alt=&quot;Java SE 설치&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jdk-환경변수-설정&quot;&gt;JDK 환경변수 설정&lt;/h1&gt;
&lt;p&gt;다음 절차에 따라 JDK 환경변수를 설정한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;키보드에서 &lt;strong&gt;Windows + Pause Break&lt;/strong&gt;를 눌러서 시스템창을 띄운후, 좌측의 &lt;strong&gt;고급 시스템 설정&lt;/strong&gt;을 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/system.png&quot; alt=&quot;윈도우 시스템 화면&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;하단의 &lt;strong&gt;환경 변수&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/system-properties.png&quot; alt=&quot;시스템 속성&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;시스템 변수&lt;/strong&gt;에서 &lt;strong&gt;새로 만들기&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/local-path-setting.png&quot; alt=&quot;새로운 변수 추가&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;변수 이름&lt;/strong&gt;에
&lt;code class=&quot;highlighter-rouge&quot;&gt;JAVA_HOME&lt;/code&gt;을 입력 하고, &lt;strong&gt;변수 값&lt;/strong&gt;에 JDK 설치 경로 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\Java\jdk1.8.0_161&lt;/code&gt;를 입력후 &lt;strong&gt;확인&lt;/strong&gt;버튼을 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/new-java-home-local-path.png&quot; alt=&quot;JavaHome 변수 추가&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;시스템 변수&lt;/strong&gt;에 &lt;strong&gt;Path&lt;/strong&gt;를 찾아 선택 후 &lt;strong&gt;편집&lt;/strong&gt;을 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/local-path-edit.png&quot; alt=&quot;Path 변수 편집&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;시스템 변수&lt;/strong&gt;에 &lt;strong&gt;Path&lt;/strong&gt;를 찾아 선택 후 &lt;strong&gt;편집&lt;/strong&gt;을 클릭하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;%JAVA_HOME%\bin&lt;/code&gt;을 입려하고 확인을 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/local-path-add.png&quot; alt=&quot;Path 변수 추가&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jdk-설치-확인&quot;&gt;JDK 설치 확인&lt;/h1&gt;
&lt;p&gt;JDK 설치 및 환경변수 설정이 완료되었는지 다음 절차를 따라 확인한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;키보드에서 &lt;strong&gt;Windows + R&lt;/strong&gt;을 눌러 &lt;strong&gt;실행창&lt;/strong&gt;을 띄운후, &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;를 입력하고 &lt;strong&gt;확인&lt;/strong&gt;버튼을 클릭한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/running.png&quot; alt=&quot;실행창&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;cmd&lt;/strong&gt;창이 뜨면 &lt;code class=&quot;highlighter-rouge&quot;&gt;java -version&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;javac -version&lt;/code&gt;을 입력하여 설치한 JDK 버전이 뜨는지 확인한다.
&lt;img src=&quot;/assets/images/post/environment/2018/2018-01-28/install-jdk-with-setting-at-windows/cmd.png&quot; alt=&quot;커맨드창&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="environment" /><category term="jdk" /><category term="jdk8" /><category term="windows" /><summary type="html">개요 이 포스팅에서는 JDK 8 설치 및 환경설정하는 방법에 대해 소개하고자 합니다.</summary></entry><entry><title type="html">윈도우10 부팅 USB 만들기</title><link href="/environment/make-windows-booting-usb" rel="alternate" type="text/html" title="윈도우10 부팅 USB 만들기" /><published>2017-11-18T17:06:00+00:00</published><updated>2017-11-18T17:06:00+00:00</updated><id>/environment/make-windows-booting-usb</id><content type="html" xml:base="/environment/make-windows-booting-usb">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;이 포스팅에서는 윈도우10 부팅 USB 만드는 방법에 대해 소개하고자 합니다.&lt;/p&gt;

&lt;h1 id=&quot;준비물&quot;&gt;준비물&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;USB (최소 8GB)&lt;/li&gt;
  &lt;li&gt;MediaCreationTool&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;usb-포멧&quot;&gt;USB 포멧&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;USB를 삽입한다.&lt;/li&gt;
  &lt;li&gt;내컴퓨터에서 삽입된 USB항목을 [오른쪽 클릭] -&amp;gt; [포멧]을 클릭한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;시작&lt;/strong&gt;버튼을 클릭한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;mediacreationtool-설치&quot;&gt;MediaCreationTool 설치&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/ko-kr/software-download/windows10&quot;&gt;Microsoft 홈페이지&lt;/a&gt;에서 MediaCreationTool을 다운로드 한다.
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/media-creation-tool-download.png&quot; alt=&quot;media-creation-tool-download&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;다운로드한 MediaCreationTool을 실행한다.
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/create-media-init.png&quot; alt=&quot;create-media-init&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;원하는 작업을 선택한다.
(다른 PC용 설치 미디어(USB 플래시 드라이브, DVD 또는 ISO 파일) 만들기)
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/create-media-choose-work.png&quot; alt=&quot;create-media-choose-work&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;부팅 USB로 만들 Windows 정보를 선택한다.
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/create-media-choose-version.png&quot; alt=&quot;create-media-choose-version&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;USB 플래시 드라이브를 선택하여, 부팅 USB 만들 준비를 한다.
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/create-media-choose-media-type.png&quot; alt=&quot;create-media-choose-media-type&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;부팅 USB로 만들 드라이브를 선택한다.
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/create-media-choose-drive.png&quot; alt=&quot;create-media-choose-drive&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Windows10 다운로드를 진행한다.
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/create-media-install.png&quot; alt=&quot;create-media-install&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;부팅-usb-생성-완료&quot;&gt;부팅 USB 생성 완료&lt;/h1&gt;
&lt;p&gt;SB를 열어보면 다음과 같이 부팅 Windows USB가 생성되어있다.
&lt;img src=&quot;/assets/images/post/environment/2017/2017-11-19/make-windows-booting-usb/booting-usb.png&quot; alt=&quot;booting-usb&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="environment" /><category term="windows" /><category term="windows10" /><category term="booting_usb" /><summary type="html">개요 이 포스팅에서는 윈도우10 부팅 USB 만드는 방법에 대해 소개하고자 합니다.</summary></entry><entry><title type="html">검색엔진에서 페이지 검색 가능하게 하기</title><link href="/jekyll/add-blog-to-search-engine" rel="alternate" type="text/html" title="검색엔진에서 페이지 검색 가능하게 하기" /><published>2017-11-02T04:48:18+00:00</published><updated>2017-11-02T04:48:18+00:00</updated><id>/jekyll/add-blog-to-search-engine</id><content type="html" xml:base="/jekyll/add-blog-to-search-engine">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;이 포스팅에서는 검색엔진에서 페이지 검색이 가능하도록 등록하는 방법에 대해 소개하고자 합니다.&lt;/p&gt;

&lt;h1 id=&quot;왜-이런-일을-해야-하나요&quot;&gt;왜 이런 일을 해야 하나요?&lt;/h1&gt;
&lt;p&gt;기본 옵션의 GitHub Pages는 일반 포털사이트의 블로그와 달리 검색엔진에서 검색이 되지 않는다. 즉, 검색엔진에 등록하지 않으면 혼자만 사용하는 홈페이지가 되는 것이다. 다양한 사람과 소통하기 위해 만든 홈페이지라면 검색엔진에 등록하는 것이 필수이다.&lt;/p&gt;

&lt;h1 id=&quot;검색엔진에-등록하기에-앞서&quot;&gt;검색엔진에 등록하기에 앞서…&lt;/h1&gt;
&lt;p&gt;검색엔진에 등록하기 전 다음과 같은 사전 준비가 필요하다.&lt;/p&gt;
&lt;h2 id=&quot;sitemapxml-추가&quot;&gt;&lt;strong&gt;sitemap.xml&lt;/strong&gt; 추가&lt;/h2&gt;
&lt;p&gt;sitemap.xml이란 검색 로봇이 홈페이지에서 어느길로 가야할지 알려주는 이정표와 같은 역할을 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/luckyDaveKim/luckyDaveKim.github.io/blob/master/sitemap.xml&quot;&gt;sitemap.xml 내용&lt;/a&gt;과 동일하게 &lt;strong&gt;sitemap.xml&lt;/strong&gt; 파일을 추가한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;주의사항!!!&lt;/code&gt; - 루트 디렉토리에 존재하는 _config.yml 파일 내부의 url에 자신의 홈페이지 url &lt;code class=&quot;highlighter-rouge&quot;&gt;url: https://luckydavekim.github.io&lt;/code&gt;을 입력해야 sitemap.xml이 정상 동작한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;robotstxt-추가&quot;&gt;&lt;strong&gt;robots.txt&lt;/strong&gt; 추가&lt;/h2&gt;
&lt;p&gt;robots.txt는 검색 로봇이 접근 범위를 지정해주는 역할을 한다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/luckyDaveKim/luckyDaveKim.github.io/blob/master/robots.txt&quot;&gt;robots.txt 내용&lt;/a&gt;를 참고하여 &lt;strong&gt;robots.txt&lt;/strong&gt; 파일을 추가한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;google-검색엔진에-등록하기&quot;&gt;Google 검색엔진에 등록하기&lt;/h1&gt;
&lt;p&gt;Google 검색엔진에 등록은 Google 웹마스터 도구(Search Console)를 통해 등록할 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/webmasters/tools/home?hl=ko&quot;&gt;Google 웹마스터 도구&lt;/a&gt;에 접속한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;속성추가&lt;/strong&gt;를 클릭하여 자신의 홈페이지 주소를 입력한다.&lt;/li&gt;
  &lt;li&gt;좌측메뉴에서 크롤링 &amp;gt; &lt;strong&gt;Sitemaps&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/add-blog-to-search-engine/google-goto-check-sitemap.png&quot; alt=&quot;google-goto-check-sitemap&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;우측 상단의 &lt;strong&gt;SITEMAP 추가/테스트&lt;/strong&gt;를 클릭한다.&lt;/li&gt;
  &lt;li&gt;자신의 홈페이지 sitemap.xml 주소&lt;code class=&quot;highlighter-rouge&quot;&gt;https://luckydavekim.github.io/sitemap.xml&lt;/code&gt;를 입력한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;naver-검색엔진에-등록하기&quot;&gt;Naver 검색엔진에 등록하기&lt;/h1&gt;
&lt;p&gt;Naver 검색엔진에 등록은 Naver 웹마스터 도구를 통해 등록할 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://webmastertool.naver.com/board/main.naver&quot;&gt;Naver 웹마스터 도구&lt;/a&gt;에 접속한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;사이트 간단 체크&lt;/strong&gt;를 통하여 자신의 홈페이지 등록 가능 여부를 확인한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/add-blog-to-search-engine/naver-check-site.png&quot; alt=&quot;naver-check-site&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;사이트 체크를 통과하였을 경우 하단의 &lt;strong&gt;조회한 사이트 소유확인 하기&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/add-blog-to-search-engine/naver-goto-check-site-own.png&quot; alt=&quot;naver-goto-check-site-own&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;HTML 파일 업로드, HTML 태그 중 원하는 인증 방식을 선택하여 인증한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/add-blog-to-search-engine/naver-check-site-own.png&quot; alt=&quot;naver-check-site-own&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="jekyll" /><category term="search_engine" /><category term="github" /><category term="github_pages" /><category term="google" /><category term="naver" /><summary type="html">개요 이 포스팅에서는 검색엔진에서 페이지 검색이 가능하도록 등록하는 방법에 대해 소개하고자 합니다.</summary></entry><entry><title type="html">Jekyll 설치하기</title><link href="/jekyll/install-jekyll" rel="alternate" type="text/html" title="Jekyll 설치하기" /><published>2017-11-02T04:45:30+00:00</published><updated>2017-11-02T04:45:30+00:00</updated><id>/jekyll/install-jekyll</id><content type="html" xml:base="/jekyll/install-jekyll">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;이 포스팅에서는 Jekyll을 설치하고 GitHub에 적용하는 방법에 대해 소개하고자 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/install-jekyll/github-jekyll-logo.png&quot; alt=&quot;github-jekyll-logo&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;필요한-software&quot;&gt;필요한 Software&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Ruby
– Ruby
– RubyDevKit
– Jekyll
– Rouge&lt;/li&gt;
  &lt;li&gt;Python
– Pygements&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ruby-설치하기&quot;&gt;Ruby 설치하기&lt;/h1&gt;
&lt;h2 id=&quot;ruby-설치&quot;&gt;Ruby 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubyinstaller.org/downloads&quot;&gt;Ruby 홈페이지&lt;/a&gt;에서 PC환경에 맞는 Ruby 설치파일을 다운로드한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/install-jekyll/ruby-download.png&quot; alt=&quot;ruby-download&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;I accept the License&lt;/strong&gt;를 선택 후 &lt;strong&gt;Next&lt;/strong&gt;를 클릭하여 설치한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/install-jekyll/ruby-install.png&quot; alt=&quot;ruby-install&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rubydevkit-설치&quot;&gt;RubyDevKit 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://rubyinstaller.org/downloads&quot;&gt;Ruby 홈페이지&lt;/a&gt;에서 PC환경에 맞는 RubyDevKit 설치파일을 다운로드한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/install-jekyll/rubydevkit-download.png&quot; alt=&quot;rubydevkit-download&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;RubyDevKit을 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\RubyDevKit&lt;/code&gt;에 설치한다.&lt;/li&gt;
  &lt;li&gt;CMD창에서 RubyDevKit을 초기화 한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;C:&lt;span class=&quot;se&quot;&gt;\R&lt;/span&gt;ubyDevKit
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby dk.rb init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby dk.rb install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jekyll-설치&quot;&gt;Jekyll 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;CMD창에서 gem을 이용하여 jekyll을 설치한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rouge-설치&quot;&gt;Rouge 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;CMD창에서 gem을 이용하여 rouge를 설치한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install rouge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;python-설치하기&quot;&gt;Python 설치하기&lt;/h1&gt;
&lt;h2 id=&quot;python-설치&quot;&gt;Python 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads&quot;&gt;Python 홈페이지&lt;/a&gt;에서 PC환경에 맞는 Python 설치파일을 다운로드한다.
&lt;img src=&quot;/assets/images/post/jekyll/2017/2017-11-02/install-jekyll/python-download.png&quot; alt=&quot;python-download&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pygments-설치&quot;&gt;Pygments 설치&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;CMD창에서 pip를 이용하여 pygments를 설치한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install Pygments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;jekyll-실행하기&quot;&gt;Jekyll 실행하기&lt;/h1&gt;
&lt;h2 id=&quot;jekyll-사이트-생성&quot;&gt;Jekyll 사이트 생성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;CMD창에서 Jekyll 사이트를 생성한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new C:&lt;span class=&quot;se&quot;&gt;\j&lt;/span&gt;ekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;다음 내용을 &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\jekyll\config.yml&lt;/code&gt;파일 끝에 추가하여 Jekyll 사이트 환경설을 한다.
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;encoding:utf-8
highlight:rouge
highlighter:Pygments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Jekyll을 실행한다.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Browser에서 &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;실행한 Jekyll 홈페이지&lt;/a&gt;로 접속한다.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="jekyll" /><category term="github" /><category term="github_pages" /><summary type="html">개요 이 포스팅에서는 Jekyll을 설치하고 GitHub에 적용하는 방법에 대해 소개하고자 합니다.</summary></entry><entry><title type="html">GitHub Pages 생성</title><link href="/git/create-github-pages" rel="alternate" type="text/html" title="GitHub Pages 생성" /><published>2017-11-01T14:32:43+00:00</published><updated>2017-11-01T14:32:43+00:00</updated><id>/git/create-github-pages</id><content type="html" xml:base="/git/create-github-pages">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;이 포스팅에서는 GitHub Pages를 생성하는 방법에 대해 소개하고자 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/git/2017/2017-11-01/create-github-pages/github-pages.jpg&quot; alt=&quot;github-pages-logo&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;github-계정생성&quot;&gt;GitHub 계정생성&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com&quot;&gt;GitHub 홈페이지&lt;/a&gt;에서 계정생성한다.&lt;/p&gt;

&lt;h1 id=&quot;github-pages-생성&quot;&gt;GitHub Pages 생성&lt;/h1&gt;
&lt;h2 id=&quot;pages를-위한-repository-생성&quot;&gt;Pages를 위한 Repository 생성&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/new&quot;&gt;GitHub Repository 생성&lt;/a&gt;에서 repository를 새성한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Repository name&lt;/strong&gt;에 자신의 github 계정명.github.io &lt;code class=&quot;highlighter-rouge&quot;&gt;luckyDaveKim.github.io&lt;/code&gt;를 기입한다.&lt;/li&gt;
  &lt;li&gt;(선택) &lt;strong&gt;Description&lt;/strong&gt;에 repository 설명 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dave dev Blog&lt;/code&gt;을 기입한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Public&lt;/strong&gt;을 선택한다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Create repository&lt;/strong&gt;를 클릭한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post/git/2017/2017-11-01/create-github-pages/create-github-repository.png&quot; alt=&quot;create-github-repository&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;html-javascript-css-파일-추가&quot;&gt;HTML, Javascript, CSS 파일 추가&lt;/h2&gt;
&lt;p&gt;1.Bash 명령어를 통해 github 저장소를 clone 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;git clone https://github.com/luckyDaveKim/luckyDaveKim.github.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.HTML 소스를 작성한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;github 테스트 페이지
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.작성한 소스를 commit 및 push 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-$xslt&quot;&gt;git add *
git commit - m &quot;init blog&quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;자신의-github-pages에-접속&quot;&gt;자신의 GitHub Pages에 접속&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;https://github 계정명.github.io &lt;code class=&quot;highlighter-rouge&quot;&gt;https://luckyDaveKim.github.io&lt;/code&gt;에 접속하여 생성된 github pages를 확인한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;테마-선택&quot;&gt;테마 선택&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Settings&lt;/strong&gt;탭을 선택한다.
&lt;img src=&quot;/assets/images/post/git/2017/2017-11-01/create-github-pages/repository-setting.png&quot; alt=&quot;repository-setting&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt;에서 &lt;strong&gt;Choose a theme&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/git/2017/2017-11-01/create-github-pages/github-pages-setting.png&quot; alt=&quot;github-pages-setting&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;원하는 테마를 클릭 후 &lt;strong&gt;Select theme&lt;/strong&gt;를 클릭한다.
&lt;img src=&quot;/assets/images/post/git/2017/2017-11-01/create-github-pages/choose-repository-theme.png&quot; alt=&quot;choose-repository-theme&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="git" /><category term="github" /><category term="github_pages" /><summary type="html">개요 이 포스팅에서는 GitHub Pages를 생성하는 방법에 대해 소개하고자 합니다.</summary></entry></feed>
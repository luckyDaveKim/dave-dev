{"version":3,"sources":["webpack:///./src/templates/tags.tsx","webpack:///./src/components/Footer.tsx"],"names":["Tags","pageContext","data","location","tag","edges","totalCount","allMarkdownRemark","tagData","allTagYaml","find","n","node","id","toLowerCase","config","title","name","content","description","property","siteUrl","pathname","facebook","twitter","split","className","css","SiteHeader","SiteArchiveHeader","outer","SiteNavMain","inner","isHome","SiteHeaderBackground","backgroundImage","image","childImageSharp","fluid","src","SiteMain","PostFeed","map","key","fields","slug","post","pageQuery","Footer","SiteFooter","SiteFooterContent","to","Date","getFullYear","footer","SiteFooterNav","github","href","target","rel","instagram","setLightness","colors","darkgrey"],"mappings":"6RAkIeA,UA3EF,EAAGC,cAAaC,OAAMC,eAAiC,YAClE,MAAMC,EAAMH,EAAYG,IAAMH,EAAYG,IAAM,IAC1C,MAAEC,EAAF,WAASC,GAAeJ,EAAKK,kBAC7BC,EAAUN,EAAKO,WAAWJ,MAAMK,KACpCC,GAAKA,EAAEC,KAAKC,GAAGC,gBAAkBV,EAAIU,eAGvC,OACE,YAAC,IAAD,KACE,YAAC,IAAD,KACE,yBACGV,EADH,MACWW,IAAOC,OAElB,oBAAMC,KAAK,cAAcC,SAASV,aAAA,EAAAA,EAASI,MAAOJ,EAAQI,KAAKO,YAAc,KAC7E,oBAAMC,SAAS,eAAeF,QAASH,IAAOC,QAC9C,oBAAMI,SAAS,UAAUF,QAAQ,YACjC,oBAAME,SAAS,WAAWF,QAAU,GAAEd,OAASW,IAAOC,UACtD,oBAAMI,SAAS,SAASF,QAASH,IAAOM,QAAUlB,EAASmB,WAC1DP,IAAOQ,UAAY,oBAAMH,SAAS,oBAAoBF,QAASH,IAAOQ,WACvE,oBAAMN,KAAK,eAAeC,QAAQ,wBAClC,oBAAMD,KAAK,gBAAgBC,QAAU,GAAEd,OAASW,IAAOC,UACvD,oBAAMC,KAAK,cAAcC,QAASH,IAAOM,QAAUlB,EAASmB,WAC3DP,IAAOS,SACN,oBACEP,KAAK,eACLC,QAAU,IAAGH,IAAOS,QAAQC,MAAM,wBAAwB,MAIhE,YAAC,IAAD,KACE,sBACEC,UAAU,sBACVC,IAAG,YAAE,CAACC,IAAYC,OAElB,mBAAKF,IAAG,YAAE,CAACG,IAAOC,OAChB,mBAAKJ,IAAKK,KACR,YAAC,IAAD,CAASC,QAAQ,MAGrB,YAAC,IAAD,CACEN,IAAG,YAAE,CAACG,IAAOI,MACbC,gBAAiB3B,SAAF,UAAEA,EAASI,YAAX,iBAAE,EAAewB,aAAjB,iBAAE,EAAsBC,uBAAxB,iBAAE,EAAuCC,aAAzC,aAAE,EAA8CC,IAC/Db,UAAU,0BAEV,YAAC,IAAD,CAAmBC,IAAKK,IAAON,UAAU,uBACvC,YAAC,IAAD,CAAWA,UAAU,cAArB,IAAoCtB,GACpC,YAAC,IAAD,CAAiBsB,UAAU,qBACxBlB,aAAA,EAAAA,EAASI,KAAKO,aACbX,EAAQI,KAAKO,YAEb,iDACmBb,EAAa,GAAQA,EAAF,SACpB,IAAfA,GAAoB,SACL,IAAfA,GAAoB,gBAOjC,oBAAMO,GAAG,YAAYc,IAAG,YAAE,CAACa,IAAUV,OACnC,mBAAKH,IAAKK,KACR,mBAAKL,IAAKc,KACPpC,EAAMqC,IAAI,EAAG9B,UACZ,YAAC,IAAD,CAAU+B,IAAK/B,EAAKgC,OAAOC,KAAMC,KAAMlC,QAK/C,YAAC,IAAD,SAQD,MAAMmC,EAAY,c,oLC1HlB,MAAMC,EAAmB,IAE5B,sBAAQrB,IAAG,YAAE,CAACG,IAAOmB,KACnB,mBAAKtB,IAAG,YAAE,CAACK,IAAOkB,KAChB,uBAASxB,UAAU,aACjB,YAAC,IAAD,CAAMyB,GAAG,KAAKpC,IAAOC,OADvB,OAC6C,IAAIoC,MAAOC,cACrDtC,IAAOuC,QAAW,MAAKvC,IAAOC,SAASD,IAAOuC,UAEjD,YAACC,EAAD,KACE,YAAC,IAAD,CAAMJ,GAAG,KAAT,gBACCpC,IAAOyC,QACN,iBAAGC,KAAM1C,IAAOyC,OAAQE,OAAO,SAASC,IAAI,uBAA5C,UAID5C,IAAOQ,UACN,iBAAGkC,KAAM1C,IAAOQ,SAAUmC,OAAO,SAASC,IAAI,uBAA9C,YAID5C,IAAO6C,WACN,iBAAGH,KAAM1C,IAAO6C,UAAWF,OAAO,SAASC,IAAI,uBAA/C,aAID5C,IAAOS,SACN,iBAAGiC,KAAM1C,IAAOS,QAASkC,OAAO,SAASC,IAAI,uBAA7C,WAKF,iBAAGF,KAAK,YAAR,UAOJR,EAAatB,YAAH,gFAKAkC,YAAa,SAAUC,IAAOC,UAL9B,KAQVb,EAAoB,CAAH,2RAmBjBK,EAAgB,mBAAH,mBAAG,CAAH","file":"component---src-templates-tags-tsx-d6706ea85ddc7d53d0d3.js","sourcesContent":["import { graphql } from 'gatsby';\r\nimport React from 'react';\r\nimport { FluidObject } from 'gatsby-image';\r\n\r\nimport { Footer } from '../components/Footer';\r\nimport SiteNav from '../components/header/SiteNav';\r\nimport { PostCard } from '../components/PostCard';\r\nimport { Wrapper } from '../components/Wrapper';\r\nimport IndexLayout from '../layouts';\r\nimport {\r\n  inner,\r\n  outer,\r\n  PostFeed,\r\n  SiteDescription,\r\n  SiteHeader,\r\n  SiteHeaderContent,\r\n  SiteMain,\r\n  SiteTitle,\r\n  SiteNavMain,\r\n  SiteArchiveHeader,\r\n  ResponsiveHeaderBackground,\r\n  SiteHeaderBackground,\r\n} from '../styles/shared';\r\nimport { PageContext } from './post';\r\nimport { Helmet } from 'react-helmet';\r\nimport config from '../website-config';\r\n\r\ninterface TagTemplateProps {\r\n  location: Location;\r\n  pageContext: {\r\n    tag: string;\r\n  };\r\n  data: {\r\n    allTagYaml: {\r\n      edges: Array<{\r\n        node: {\r\n          id: string;\r\n          description: string;\r\n          image?: {\r\n            childImageSharp: {\r\n              fluid: FluidObject;\r\n            };\r\n          };\r\n        };\r\n      }>;\r\n    };\r\n    allMarkdownRemark: {\r\n      totalCount: number;\r\n      edges: Array<{\r\n        node: PageContext;\r\n      }>;\r\n    };\r\n  };\r\n}\r\n\r\nconst Tags = ({ pageContext, data, location }: TagTemplateProps) => {\r\n  const tag = pageContext.tag ? pageContext.tag : '';\r\n  const { edges, totalCount } = data.allMarkdownRemark;\r\n  const tagData = data.allTagYaml.edges.find(\r\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\r\n  );\r\n\r\n  return (\r\n    <IndexLayout>\r\n      <Helmet>\r\n        <title>\r\n          {tag} - {config.title}\r\n        </title>\r\n        <meta name=\"description\" content={tagData?.node ? tagData.node.description : ''} />\r\n        <meta property=\"og:site_name\" content={config.title} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\r\n        <meta property=\"og:url\" content={config.siteUrl + location.pathname} />\r\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\r\n        <meta name=\"twitter:url\" content={config.siteUrl + location.pathname} />\r\n        {config.twitter && (\r\n          <meta\r\n            name=\"twitter:site\"\r\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\r\n          />\r\n        )}\r\n      </Helmet>\r\n      <Wrapper>\r\n        <header\r\n          className=\"site-archive-header\"\r\n          css={[SiteHeader, SiteArchiveHeader]}\r\n        >\r\n          <div css={[outer, SiteNavMain]}>\r\n            <div css={inner}>\r\n              <SiteNav isHome={false} />\r\n            </div>\r\n          </div>\r\n          <ResponsiveHeaderBackground\r\n            css={[outer, SiteHeaderBackground]}\r\n            backgroundImage={tagData?.node?.image?.childImageSharp?.fluid?.src}\r\n            className=\"site-header-background\"\r\n          >\r\n            <SiteHeaderContent css={inner} className=\"site-header-content\">\r\n              <SiteTitle className=\"site-title\">#{tag}</SiteTitle>\r\n              <SiteDescription className=\"site-description\">\r\n                {tagData?.node.description ? (\r\n                  tagData.node.description\r\n                ) : (\r\n                  <>\r\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\r\n                    {totalCount === 1 && '1 post'}\r\n                    {totalCount === 0 && 'No posts'}\r\n                  </>\r\n                )}\r\n              </SiteDescription>\r\n            </SiteHeaderContent>\r\n          </ResponsiveHeaderBackground>\r\n        </header>\r\n        <main id=\"site-main\" css={[SiteMain, outer]}>\r\n          <div css={inner}>\r\n            <div css={PostFeed}>\r\n              {edges.map(({ node }) => (\r\n                <PostCard key={node.fields.slug} post={node} />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <Footer />\r\n      </Wrapper>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport default Tags;\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allTagYaml {\r\n      edges {\r\n        node {\r\n          id\r\n          description\r\n          image {\r\n            childImageSharp {\r\n              fluid(maxWidth: 3720) {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            excerpt\r\n            tags\r\n            date\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 1240) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            layout\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { Link } from 'gatsby';\r\nimport { setLightness } from 'polished';\r\nimport React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { css } from '@emotion/core';\r\n\r\nimport { colors } from '../styles/colors';\r\nimport { outer, inner } from '../styles/shared';\r\nimport config from '../website-config';\r\n\r\nexport const Footer: React.FC = () => {\r\n  return (\r\n    <footer css={[outer, SiteFooter]}>\r\n      <div css={[inner, SiteFooterContent]}>\r\n        <section className=\"copyright\">\r\n          <Link to=\"/\">{config.title}</Link> &copy; {new Date().getFullYear()}\r\n          {config.footer && ` | ${config.title} ${config.footer}`}\r\n        </section>\r\n        <SiteFooterNav>\r\n          <Link to=\"/\">Latest Posts</Link>\r\n          {config.github && (\r\n            <a href={config.github} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              GitHub\r\n            </a>\r\n          )}\r\n          {config.facebook && (\r\n            <a href={config.facebook} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Facebook\r\n            </a>\r\n          )}\r\n          {config.instagram && (\r\n            <a href={config.instagram} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Instagram\r\n            </a>\r\n          )}\r\n          {config.twitter && (\r\n            <a href={config.twitter} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Twitter\r\n            </a>\r\n          )}\r\n\r\n          <a href=\"/rss.xml\">RSS</a>\r\n        </SiteFooterNav>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nconst SiteFooter = css`\r\n  position: relative;\r\n  padding-top: 20px;\r\n  padding-bottom: 60px;\r\n  color: #fff;\r\n  background: ${setLightness('0.0015', colors.darkgrey)};\r\n`;\r\n\r\nconst SiteFooterContent = css`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  color: rgba(255, 255, 255, 0.7);\r\n  font-size: 1.3rem;\r\n  a {\r\n    color: rgba(255, 255, 255, 0.7);\r\n  }\r\n  a:hover {\r\n    color: rgba(255, 255, 255, 1);\r\n    text-decoration: none;\r\n  }\r\n  @media (max-width: 650px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst SiteFooterNav = styled.nav`\r\n  display: flex;\r\n\r\n  a {\r\n    position: relative;\r\n    margin-left: 20px;\r\n  }\r\n\r\n  a:before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 11px;\r\n    left: -11px;\r\n    display: block;\r\n    width: 2px;\r\n    height: 2px;\r\n    background: #fff;\r\n    border-radius: 100%;\r\n  }\r\n\r\n  a:first-of-type:before {\r\n    display: none;\r\n  }\r\n  @media (max-width: 650px) {\r\n    a:first-of-type {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`;\r\n\r\n"],"sourceRoot":""}